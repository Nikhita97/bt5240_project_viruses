#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Apr  1 10:58:47 2019
Upload human PPI file.

Upload the file "gen_file_list.csv" which was generated by the 
program read_fasta_files.py program.

The <virus>_human.csv files listed in gen_file_list.csv should be 
saved in the same path as gen_file_list.csv.

A log file with the name 'subgraph_except.log' will be created/
updated with the exceptions that happen during subgraph generation.

A new csv file with the name centrality.csv would be created in the 
same path as gen_file_list.csv.

@author: debomita
"""

import sys
import pandas as pd
import networkx as nx
from tkinter import Tk
from tkinter.filedialog import askopenfilename
import logging

def deg_cent(G,node):    
# Degree centrality  
    deg_centrality1 = nx.degree_centrality(G)
    deg_centrality = deg_centrality1[node]    
    return(deg_centrality)
#****************************************************************************** 
def clos_cent(G,node):    
# Closeness centrality 
    clos_centrality = nx.closeness_centrality(G, u=node)   
    return(clos_centrality)
#******************************************************************************
def subgr_cent(G,node):    
# Subgraph centrality   
    subgr_centrality1 = nx.subgraph_centrality(G)
    subgr_centrality = subgr_centrality1[node]
    print(subgr_centrality)
    return(subgr_centrality)
#****************************************************************************** 
 
def centr_measures(G_sub, node, deg_centrality, clos_centrality,
                   subgr_centrality):


#   Add centrality measures to list   
    deg_centrality.append(deg_cent(G_sub,node)) 
    clos_centrality.append(clos_cent(G_sub,node))
    subgr_centrality.append(subgr_cent(G_sub,node))

#******************************************************************************





Tk().withdraw()
# Upload file with human PPI data
source_file = askopenfilename(title = 'Upload human PPI file',filetypes = (("csv files","*.csv"),("all files","*.*")))
print(source_file)
# Upload file with list of file names containing human proteins
# from viral-human interaction network
subgraph_file = askopenfilename(title = 'Upload "gen_file_list.csv"',filetypes = (("csv files","*.csv"),("all files","*.*")))
print(subgraph_file)


file = pd.read_csv(source_file, sep = " ")
# Filter out PPIs with combined_score >= 900
file = file[file["combined_score"]>=900]

# Get edge list from the file
edgelist = [(row['protein1'], row['protein2']) for index, row in file.iterrows()]


# Create graph for the human PPI network
G = nx.Graph()
G.add_edges_from(edgelist)
    
# Print the human PPI network info    
print(nx.info(G))
#********************Constructing the subgraph*********************************
#Initialize lists
node = []
deg_centrality = []
clos_centrality = []
subgr_centrality = []


#********************Constructing the subgraph*********************************

# Read file containing file names (<virus>_human.csv)
sub_fnames = pd.read_csv(subgraph_file)
sub_fnames1 = [row['fname'] for index, row in sub_fnames.iterrows()]
for sub_line in sub_fnames1:  

    # Get node list from column 1 of file
   sub_node_list = pd.read_csv(subgraph_file[:-17]+sub_line, usecols=[0])
   sub_node_list1 = [row['prot_id'] for index, row in sub_node_list.iterrows()]
    # Initialize subgraph
   G_sub = nx.Graph() 
   for node_i in sub_node_list1:
       try:
           # Pass each node to get a subgraph of upto the 3rd nearest neighbour
           G_sub = nx.ego_graph(G, node_i,radius = 3, center=True, undirected=True)
           # Call function for calculation of centrality measures
           centr_measures(G_sub, node_i, deg_centrality, clos_centrality, subgr_centrality)
        
           node.append(node_i)           
           pass
       except:
           
           logging.basicConfig(filename=subgraph_file[:-17]+'subgraph_except.log',level=logging.DEBUG)
           logging.debug(sys.exc_info())
           logging.info('Filename:'+sub_line+'\n')
           pass
   
#******************************************************************************    
# Write all the centrality measures found, into a csv file                       
    
#******************************************************************************    
centrality_df = pd.DataFrame({'prot_id': node,                                 #add nodes
                              'degree_centrality': deg_centrality,             #add degree centrality
                              'closeness_centrality': clos_centrality,         #add closeness centrality
                              'subgraph_centrality': subgr_centrality          #add subgraph centrality
                                  })        
##  The csv file with the centrality measures would be updated 
centrality_df.to_csv(subgraph_file[:-17]+'centrality.csv',index=True, header=True)
